"use client"; // This is a client component 👈🏽

import React, { useState } from "react";

const CalorieCalculator = () => {
  const [weight, setWeight] = useState<number | null>(null);
  const [height, setHeight] = useState<number | null>(null);
  const [age, setAge] = useState<number | null>(null);
  const [activityLevel, setActivityLevel] = useState<string>("sedentary");
  const [unitSystem, setUnitSystem] = useState<string>("metric");
  const [caloriesResult, setCaloriesResult] = useState<number | null>(null);

  const calculateCalories = () => {
    if (weight && height && age) {
      let calories: number;
      if (unitSystem === "metric") {
        const bmr = 10 * weight + 6.25 * height - 5 * age + 5;
        calories = calculateCaloriesWithActivityLevel(bmr);
      } else {
        const weightInKg = weight * 0.453592;
        const heightInCm = height * 30.48;
        const bmr = 10 * weightInKg + 6.25 * heightInCm - 5 * age + 5;
        calories = calculateCaloriesWithActivityLevel(bmr);
      }
      setCaloriesResult(calories);
    }
  };

  const calculateCaloriesWithActivityLevel = (bmr: number) => {
    switch (activityLevel) {
      case "sedentary":
        return bmr * 1.2;
      case "lightlyActive":
        return bmr * 1.375;
      case "moderatelyActive":
        return bmr * 1.55;
      case "veryActive":
        return bmr * 1.725;
      case "extraActive":
        return bmr * 1.9;
      default:
        return bmr;
    }
  };

  const handleUnitSystemToggle = () => {
    setUnitSystem(unitSystem === "metric" ? "us" : "metric");
    setWeight(null);
    setHeight(null);
  };

  return (
    <div className="container mx-auto">
      <h2 className="text-2xl font-semibold mb-4">Calorie Calculator</h2>

      {/* Unit System Toggle */}
      <div className="flex items-center mb-4">
        <p className="mr-2">Units: </p>
        <button
          className={`bg-${unitSystem === "metric" ? "blue-light" : "green"} text-white py-2 px-4 rounded-md hover:bg-${
            unitSystem === "metric" ? "blue-dark" : "green"
          } transition-colors duration-300`}
          onClick={handleUnitSystemToggle}
        >
          {unitSystem === "metric" ? "Metric" : "US"}
        </button>
      </div>

      {/* Calorie Calculator Form */}
      <form className="mb-4">
        <div className="mb-4">
          <label htmlFor="weight" className="text-gray-700">
            Weight:
          </label>
          <input
            type="number"
            id="weight"
            className="w-40 p-2 border border-gray-300 rounded-md"
            placeholder={`Enter weight in ${unitSystem === "metric" ? "kg" : "lbs"}`}
            value={weight ?? ""}
            onChange={(e) => setWeight(Number(e.target.value))}
          />
        </div>
        <div className="mb-4">
          <label htmlFor="height" className="text-gray-700">
            Height:
          </label>
          <input
            type="number"
            id="height"
            className="w-40 p-2 border border-gray-300 rounded-md"
            placeholder={`Enter height in ${unitSystem === "metric" ? "cm" : "ft"}`}
            value={height ?? ""}
            onChange={(e) => setHeight(Number(e.target.value))}
          />
        </div>
        <div className="mb-4">
          <label htmlFor="age" className="text-gray-700">
            Age:
          </label>
          <input
            type="number"
            id="age"
            className="w-40 p-2 border border-gray-300 rounded-md"
            placeholder="Enter age"
            value={age ?? ""}
            onChange={(e) => setAge(Number(e.target.value))}
          />
        </div>
        <div className="mb-4">
          <label htmlFor="activityLevel" className="text-gray-700">
            Activity Level:
          </label>
          <select
            id="activityLevel"
            className="w-40 p-2 border border-gray-300 rounded-md"
            value={activityLevel}
            onChange={(e) => setActivityLevel(e.target.value)}
          >
            <option value="sedentary">Sedentary (little to no exercise)</option>
            <option value="lightlyActive">Lightly active (light exercise/sports 1-3 days/week)</option>
            <option value="moderatelyActive">Moderately active (moderate exercise/sports 3-5 days/week)</option>
            <option value="veryActive">Very active (hard exercise/sports 6-7 days/week)</option>
            <option value="extraActive">Extra active (very hard exercise/sports & physical job)</option>
          </select>
        </div>
        <button
          type="button"
          className="bg-blue-light text-white py-2 px-4 rounded-md hover:bg-blue-dark transition-colors duration-300"
          onClick={calculateCalories}
        >
          Calculate
        </button>
      </form>

      {/* Calorie Calculation Results */}
      {caloriesResult && (
        <div className="mb-4">
          <h3 className="text-lg font-semibold">Results:</h3>
          <p className="text-gray-700">Calories needed per day: {caloriesResult.toFixed(2)}</p>
          {caloriesResult < 1200 && (
            <p className="text-red-500 mt-2">
              Warning: Consuming less than 1200 calories per day may not provide sufficient nutrients for your body's
              needs. Consult with a healthcare professional or registered dietitian for personalized guidance.
            </p>
          )}
          {caloriesResult > 3000 && (
            <p className="text-red-500 mt-2">
              Warning: Consuming more than 3000 calories per day may lead to weight gain. It's important to focus on the
              quality of the calories and maintain a balanced diet.
            </p>
          )}
        </div>
      )}
    </div>
  );
};

export default CalorieCalculator;
