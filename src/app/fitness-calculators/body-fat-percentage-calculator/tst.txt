"use client"; // This is a client component 👈🏽
import { useState } from 'react';
import Head from 'next/head';

const BodyFatCalculatorPage = () => {
  const [age, setAge] = useState<string>('');
  const [weight, setWeight] = useState<string>('');
  const [heightFeet, setHeightFeet] = useState<string>('');
  const [heightInches, setHeightInches] = useState<string>('');
  const [waistFeet, setWaistFeet] = useState<string>('');
  const [waistInches, setWaistInches] = useState<string>('');
  const [neckFeet, setNeckFeet] = useState<string>('');
  const [neckInches, setNeckInches] = useState<string>('');
  const [hipFeet, setHipFeet] = useState<string>('');
  const [hipInches, setHipInches] = useState<string>('');
  const [gender, setGender] = useState<'male' | 'female'>('male');
  const [unitSystem, setUnitSystem] = useState<'metric' | 'us'>('metric');
  const [bodyFatPercentage, setBodyFatPercentage] = useState<string>('');

  const calculateBodyFatPercentage = () => {
    let weightValue = parseFloat(weight);
    let heightValue = 0;
    let waistValue = 0;
    let neckValue = 0;
    let hipValue = 0;

    if (unitSystem === 'us') {
      // Convert weight from pounds to kilograms
      weightValue = weightValue * 0.453592;

      // Convert height from feet and inches to centimeters
      const feetToCm = parseFloat(heightFeet) * 30.48;
      const inchesToCm = parseFloat(heightInches) * 2.54;
      heightValue = feetToCm + inchesToCm;

      // Convert waist circumference from feet and inches to centimeters
      const waistFeetToCm = parseFloat(waistFeet) * 30.48;
      const waistInchesToCm = parseFloat(waistInches) * 2.54;
      waistValue = waistFeetToCm + waistInchesToCm;

      // Convert neck circumference from feet and inches to centimeters
      const neckFeetToCm = parseFloat(neckFeet) * 30.48;
      const neckInchesToCm = parseFloat(neckInches) * 2.54;
      neckValue = neckFeetToCm + neckInchesToCm;

      // Convert hip circumference from feet and inches to centimeters
      const hipFeetToCm = parseFloat(hipFeet) * 30.48;
      const hipInchesToCm = parseFloat(hipInches) * 2.54;
      hipValue = hipFeetToCm + hipInchesToCm;
    } else {
      // Metric unit system
      heightValue = parseFloat(heightFeet);
      waistValue = parseFloat(waistFeet);
      neckValue = parseFloat(neckFeet);
      hipValue = parseFloat(hipFeet);
    }

    if (weightValue && heightValue && waistValue && neckValue) {
      // Calculate body fat percentage using the Navy Method formula
      const leanBodyMass = (weightValue * 1.082) + 94.42 - (waistValue * 4.15);
      const bodyFatMass = weightValue - leanBodyMass;
      const bodyFatPercentageValue = (bodyFatMass * 100) / weightValue;
      setBodyFatPercentage(bodyFatPercentageValue.toFixed(2));
    } else {
      setBodyFatPercentage('');
    }
  };

  const handleUnitSystemToggle = () => {
    const newUnitSystem = unitSystem === 'metric' ? 'us' : 'metric';
    setUnitSystem(newUnitSystem);
    setAge('');
    setWeight('');
    setHeightFeet('');
    setHeightInches('');
    setWaistFeet('');
    setWaistInches('');
    setNeckFeet('');
    setNeckInches('');
    setHipFeet('');
    setHipInches('');
    setBodyFatPercentage('');
  };

  return (
    <>
      <Head>
        <title>Body Fat Percentage Calculator | FitnessCalcAdvisor</title>
        <meta name="description" content="Calculate your body fat percentage using the Navy Method to assess your body composition based on your age, weight, height, waist, neck, and hip measurements." />
        <link rel="canonical" href="https://www.fitnesscalcadvisor.com/body-fat-calculator" />
      </Head>

      <div className="container mx-auto py-8">
        <h1 className="text-3xl font-bold mb-4 text-center">Body Fat Percentage Calculator</h1>

        <div className="flex justify-center mb-6">
          <button
            className="hover:bg-blue-light bg-blue-dark text-white font-semibold py-2 px-4 rounded-md"
            onClick={handleUnitSystemToggle}
          >
            Switch to {unitSystem === 'us' ? 'Metric Units' : 'US Units'}
          </button>
        </div>

        <div className="flex justify-center">
          <div className="w-full max-w-md">
            <div className="mt-6">
              <label htmlFor="age" className="block font-semibold mb-2">Age:</label>
              <input
                type="number"
                id="age"
                className="border border-gray-300 px-4 py-2 rounded-md w-full"
                value={age}
                onChange={(e) => setAge(e.target.value)}
              />
            </div>

            <div className="mt-4">
              <label htmlFor="weight" className="block font-semibold mb-2">Weight:</label>
              <div className="flex items-center">
                <input
                  type="number"
                  id="weight"
                  className="border border-gray-300 px-4 py-2 rounded-md w-40 mr-2"
                  value={weight}
                  onChange={(e) => setWeight(e.target.value)}
                />
                {unitSystem === 'us' ? (
                  <span className="ml-2">lb</span>
                ) : (
                  <span className="ml-2">kg</span>
                )}
              </div>
            </div>

            <div className="mt-4">
              <label htmlFor="height" className="block font-semibold mb-2">Height:</label>
              <div className="flex items-center mb-4">
                {unitSystem === 'us' ? (
                  <>
                    <input
                      type="number"
                      id="feet"
                      className="border border-gray-300 px-4 py-2 rounded-md w-20 mr-2"
                      placeholder="Feet"
                      value={heightFeet}
                      onChange={(e) => setHeightFeet(e.target.value)}
                    />
                    <input
                      type="number"
                      id="inches"
                      className="border border-gray-300 px-4 py-2 rounded-md w-20"
                      placeholder="Inches"
                      value={heightInches}
                      onChange={(e) => setHeightInches(e.target.value)}
                    />
                  </>
                ) : (
                  <>
                    <input
                      type="number"
                      id="meters"
                      className="border border-gray-300 px-4 py-2 rounded-md w-40"
                      placeholder="Meters"
                      value={heightFeet}
                      onChange={(e) => setHeightFeet(e.target.value)}
                    />
                  </>
                )}
              </div>
            </div>

            <div className="mt-4">
              <label htmlFor="waist" className="block font-semibold mb-2">Waist:</label>
              <div className="flex items-center mb-4">
                {unitSystem === 'us' ? (
                  <>
                    <input
                      type="number"
                      id="waistFeet"
                      className="border border-gray-300 px-4 py-2 rounded-md w-20 mr-2"
                      placeholder="Feet"
                      value={waistFeet}
                      onChange={(e) => setWaistFeet(e.target.value)}
                    />
                    <input
                      type="number"
                      id="waistInches"
                      className="border border-gray-300 px-4 py-2 rounded-md w-20"
                      placeholder="Inches"
                      value={waistInches}
                      onChange={(e) => setWaistInches(e.target.value)}
                    />
                  </>
                ) : (
                  <>
                    <input
                      type="number"
                      id="waistMeters"
                      className="border border-gray-300 px-4 py-2 rounded-md w-40"
                      placeholder="Centimeters"
                      value={waistFeet}
                      onChange={(e) => setWaistFeet(e.target.value)}
                    />
                  </>
                )}
              </div>
            </div>

            <div className="mt-4">
              <label htmlFor="neck" className="block font-semibold mb-2">Neck:</label>
              <div className="flex items-center mb-4">
                {unitSystem === 'us' ? (
                  <>
                    <input
                      type="number"
                      id="neckFeet"
                      className="border border-gray-300 px-4 py-2 rounded-md w-20 mr-2"
                      placeholder="Feet"
                      value={neckFeet}
                      onChange={(e) => setNeckFeet(e.target.value)}
                    />
                    <input
                      type="number"
                      id="neckInches"
                      className="border border-gray-300 px-4 py-2 rounded-md w-20"
                      placeholder="Inches"
                      value={neckInches}
                      onChange={(e) => setNeckInches(e.target.value)}
                    />
                  </>
                ) : (
                  <>
                    <input
                      type="number"
                      id="neckMeters"
                      className="border border-gray-300 px-4 py-2 rounded-md w-40"
                      placeholder="Centimeters"
                      value={neckFeet}
                      onChange={(e) => setNeckFeet(e.target.value)}
                    />
                  </>
                )}
              </div>
            </div>

            {gender === 'female' && (
              <div className="mt-4">
                <label htmlFor="hip" className="block font-semibold mb-2">Hip:</label>
                <div className="flex items-center mb-4">
                  {unitSystem === 'us' ? (
                    <>
                      <input
                        type="number"
                        id="hipFeet"
                        className="border border-gray-300 px-4 py-2 rounded-md w-20 mr-2"
                        placeholder="Feet"
                        value={hipFeet}
                        onChange={(e) => setHipFeet(e.target.value)}
                      />
                      <input
                        type="number"
                        id="hipInches"
                        className="border border-gray-300 px-4 py-2 rounded-md w-20"
                        placeholder="Inches"
                        value={hipInches}
                        onChange={(e) => setHipInches(e.target.value)}
                      />
                    </>
                  ) : (
                    <>
                      <input
                        type="number"
                        id="hipMeters"
                        className="border border-gray-300 px-4 py-2 rounded-md w-40"
                        placeholder="Centimeters"
                        value={hipFeet}
                        onChange={(e) => setHipFeet(e.target.value)}
                      />
                    </>
                  )}
                </div>
              </div>
            )}

            <div className="mt-6">
              <label htmlFor="gender" className="block font-semibold mb-2">Gender:</label>
              <div className="flex items-center">
                <label htmlFor="male" className="mr-4">
                  <input
                    type="radio"
                    id="male"
                    value="male"
                    checked={gender === 'male'}
                    onChange={() => setGender('male')}
                  />
                  <span className="ml-2">Male</span>
                </label>
                <label htmlFor="female">
                  <input
                    type="radio"
                    id="female"
                    value="female"
                    checked={gender === 'female'}
                    onChange={() => setGender('female')}
                  />
                  <span className="ml-2">Female</span>
                </label>
              </div>
            </div>

            <div className="mt-8">
              <button
                className="hover:bg-blue-light bg-blue-dark text-white font-semibold py-2 px-4 rounded-md w-full"
                onClick={calculateBodyFatPercentage}
              >
                Calculate
              </button>
            </div>

            {bodyFatPercentage && (
              <div className="mt-8 text-center">
                <h2 className="text-2xl font-semibold mb-2">Body Fat Percentage:</h2>
                <p className="text-3xl font-bold">{bodyFatPercentage}%</p>
              </div>
            )}
          </div>
        </div>
      </div>
    </>
  );
};

export default BodyFatCalculatorPage;
